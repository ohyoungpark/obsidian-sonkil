#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const crypto = require('crypto');

function calculateChecksum(filePath) {
  const content = fs.readFileSync(filePath);
  return crypto.createHash('sha256').update(content).digest('hex');
}

function checkBuildStatus() {
  const mainJsPath = path.join(process.cwd(), 'main.js');
  const tempJsPath = path.join(process.cwd(), 'main.tmp.js');

  try {
    // 현재 main.js의 체크섬 계산
    const originalChecksum = calculateChecksum(mainJsPath);

    // esbuild 설정을 수정하여 임시 파일로 빌드
    const esbuildConfig = path.join(process.cwd(), 'esbuild.config.mjs');
    const tempConfig = `
      import esbuild from "esbuild";
      import process from "process";
      import builtins from "builtin-modules";

      const banner =
      \`/*
      THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
      if you want to view the source, please visit the github repository of this plugin
      */
      \`;

      const context = await esbuild.context({
        banner: {
          js: banner,
        },
        entryPoints: ["main.ts"],
        bundle: true,
        external: [
          "obsidian",
          "electron",
          "@codemirror/autocomplete",
          "@codemirror/collab",
          "@codemirror/commands",
          "@codemirror/language",
          "@codemirror/lint",
          "@codemirror/search",
          "@codemirror/state",
          "@codemirror/view",
          "@lezer/common",
          "@lezer/highlight",
          "@lezer/lr",
          ...builtins,
        ],
        format: "cjs",
        target: "es2018",
        logLevel: "info",
        sourcemap: false,
        treeShaking: true,
        outfile: "main.tmp.js",
      });

      await context.rebuild();
      process.exit(0);
    `;

    // 임시 설정 파일 생성 및 빌드 실행
    const tempConfigPath = path.join(process.cwd(), 'esbuild.temp.mjs');
    fs.writeFileSync(tempConfigPath, tempConfig);
    execSync(`node ${tempConfigPath}`, { stdio: 'pipe' });

    // 새로 빌드된 파일의 체크섬 계산
    const newChecksum = calculateChecksum(tempJsPath);

    // 체크섬 비교
    if (originalChecksum !== newChecksum) {
      // 체크섬이 다르면 임시 파일로 main.js 덮어쓰기
      fs.copyFileSync(tempJsPath, mainJsPath);
      console.error('\x1b[31mError: main.js is outdated and has been updated. Please review changes and commit again.\x1b[0m');
      process.exit(1);
    }

    // 성공 시 임시 파일들 정리
    fs.unlinkSync(tempJsPath);
    fs.unlinkSync(tempConfigPath);

    console.log('\x1b[32mBuild status check passed.\x1b[0m');
    process.exit(0);
  } catch (error) {
    console.error('\x1b[31mError during build verification:', error.message, '\x1b[0m');

    // 에러 발생 시 임시 파일들 정리 시도
    try {
      if (fs.existsSync(tempJsPath)) fs.unlinkSync(tempJsPath);
      if (fs.existsSync('esbuild.temp.mjs')) fs.unlinkSync('esbuild.temp.mjs');
    } catch (cleanupError) {
      console.error('\x1b[31mError cleaning up temporary files:', cleanupError.message, '\x1b[0m');
    }

    process.exit(1);
  }
}

checkBuildStatus();